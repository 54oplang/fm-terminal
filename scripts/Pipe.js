// Generated by CoffeeScript 1.6.3
(function() {
  var PipeBase, PipeClient, PipeServer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PipeBaseClass = PipeBase = (function() {
    function PipeBase() {}

    PipeBase.prototype.dispatch = function(msg) {
      console.log("Msg on pipe " + this.name + ":");
      return console.log(msg);
    };

    PipeBase.prototype.post = function(msg) {
      return this.port.postMessage(msg);
    };

    return PipeBase;

  })();

  window.PipeClientClass = PipeClient = (function(_super) {
    __extends(PipeClient, _super);

    function PipeClient(name) {
      var _this = this;
      this.name = name;
      console.log("Init Pipe Client " + this.name);
      this.port = chrome.runtime.connect({
        name: this.name
      });
      this.port.onMessage.addListener(function(msg) {
        return _this.dispatch(msg);
      });
    }

    return PipeClient;

  })(PipeBase);

  window.PipeServerClass = PipeServer = (function(_super) {
    __extends(PipeServer, _super);

    function PipeServer(name) {
      var _this = this;
      this.name = name;
      chrome.runtime.onConnect.addListener(function(port) {
        console.log("Init Pipe Server " + _this.name);
        if (port.name === _this.name) {
          console.log("Conected pipe: " + _this.name);
          console.log(port.sender);
          _this.port = port;
          return _this.port.onMessage.addListener(function(msg) {
            return _this.dispatch(msg);
          });
        }
      });
    }

    return PipeServer;

  })(PipeBase);

}).call(this);

/*
//@ sourceMappingURL=Pipe.map
*/
