// Generated by CoffeeScript 1.6.3
(function() {
  var LoginUI;

  LoginUI = (function() {
    var msg_wrong_pass, msg_wrong_user, wait_for_pass, wait_for_remember, wait_for_user;

    wait_for_user = 0;

    wait_for_pass = 1;

    wait_for_remember = 2;

    function LoginUI() {
      window.LoginUI = this;
      window.Pipe.registerRPC("login_succ", this.succ.bind(this));
      window.Pipe.registerRPC("login_fail", this.fail.bind(this));
      window.Pipe.registerRPC("login_begin", this.begin.bind(this));
    }

    LoginUI.prototype.showInfo = function() {
      window.T.echo("Login to douban.fm...");
      return this.echoNeedUser();
    };

    LoginUI.prototype.exit = function() {
      var term;
      this.pass = "";
      term = window.T;
      term.set_mask(false);
      return window.TERM.setUser(this.user);
    };

    LoginUI.prototype.echoNeedUser = function() {
      window.T.echo("Username (email address)");
      return window.T.set_mask(false);
    };

    LoginUI.prototype.echoNeedPass = function() {
      window.T.echo("Password");
      return window.T.set_mask(true);
    };

    LoginUI.prototype.echoNeedRemember = function() {
      window.T.echo("Remember me? (y/n)");
      window.T.set_mask(false);
      if (this.remember != null) {
        return window.T.insert(this.remember ? "y" : "n");
      }
    };

    LoginUI.prototype.isValidUser = function(user) {
      return true;
    };

    LoginUI.prototype.isValidPass = function(pass) {
      return true;
    };

    LoginUI.prototype.succ = function(user) {
      this.user = user;
      delete this["remember"];
      window.T.pop();
      window.T.resume();
      return window.T.echo("Welcome...");
    };

    msg_wrong_user = "invalidate_email";

    msg_wrong_pass = "wrong_password";

    LoginUI.prototype.fail = function(user) {
      var err;
      this.user = user;
      err = user.err;
      window.T.error("Login failed: " + err);
      window.T.resume();
      switch (err) {
        case msg_wrong_user:
          this.stage = wait_for_user;
          return this.echoNeedUser();
        case msg_wrong_pass:
          this.stage = wait_for_pass;
          return this.echoNeedPass();
        default:
          return window.T.pop();
      }
    };

    LoginUI.prototype.input = function(text, term) {
      switch (this.stage) {
        case wait_for_user:
          if (this.isValidUser(text)) {
            this.username = text;
            this.echoNeedPass();
            this.stage = wait_for_pass;
          } else {
            term.error("Invalid username, try again");
          }
          break;
        case wait_for_pass:
          if (this.isValidPass(text)) {
            this.pass = text;
            this.echoNeedRemember();
            this.stage = wait_for_remember;
          }
          break;
        case wait_for_remember:
          switch (text) {
            case "y":
            case "Y":
              this.remember = true;
              break;
            case "n":
            case "N":
              this.remember = false;
              break;
            default:
              this.echoNeedRemember();
              return;
          }
          term.echo("Login...");
          term.pause();
          window.Pipe.fireRPC("do_login", {
            username: this.username,
            password: this.pass,
            remember: this.remember
          });
      }
    };

    LoginUI.prototype.begin = function() {
      var _this = this;
      this.stage = wait_for_user;
      return window.T.push(function(input, term) {
        return _this.input(input, term);
      }, {
        name: "login",
        prompt: ":",
        onStart: function() {
          return _this.showInfo();
        },
        onExit: function() {
          return _this.exit();
        },
        completion: function() {},
        keydown: function(e) {}
      });
    };

    return LoginUI;

  })();

  new LoginUI();

}).call(this);

/*
//@ sourceMappingURL=LoginUI.map
*/
