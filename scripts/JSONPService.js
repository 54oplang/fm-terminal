// Generated by CoffeeScript 1.6.3
(function() {
  var JSONPService;

  JSONPService = (function() {
    function JSONPService(proxy) {
      this.proxy = proxy;
    }

    JSONPService.prototype.encodePayload = function(payload) {
      var k, pairs, str, v;
      pairs = [];
      for (k in payload) {
        v = payload[k];
        pairs.push(k + "=" + v);
      }
      str = pairs.join("&");
      return $.base64.encode(str);
    };

    JSONPService.prototype.query = function(type, url, payload, succ, err) {
      var encoded, encoded_payload;
      encoded = this.encodePayload(payload);
      encoded_payload = {
        'url': $.base64.encode(url),
        'payload': encoded
      };
      console.log("" + type + " " + url);
      console.log("Payload: ");
      console.log(payload);
      console.log("Encoded: ");
      console.log(encoded_payload);
      console.log("Decoded: ");
      console.log($.base64.decode(encoded));
      return $.jsonp({
        type: type,
        data: encoded_payload,
        url: this.proxy + "?callback=?",
        xhrFields: {
          withCredentials: false
        },
        success: function(data) {
          return succ(data);
        },
        error: function(j, status, error) {
          return err(status, error);
        }
      });
    };

    JSONPService.prototype.get = function(url, data, succ, err) {
      return this.query("GET", url, data, succ, err);
    };

    JSONPService.prototype.post = function(url, data, succ, err) {
      return this.query("POST", url, data, succ, err);
    };

    return JSONPService;

  })();

  if (window.Service == null) {
    window.Service = new JSONPService(proxy_domain);
  }

}).call(this);

/*
//@ sourceMappingURL=JSONPService.map
*/
