// Generated by CoffeeScript 1.6.3
(function() {
  var ChannelCommand, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  String.prototype.width = function() {
    var c, i, len, width, _i, _len;
    len = this.length;
    width = 0;
    for (c = _i = 0, _len = this.length; _i < _len; c = ++_i) {
      i = this[c];
      if (this.charCodeAt(i) || this.charCodeAt(i) > 126) {
        width += 2;
      } else {
        width++;
      }
    }
    return width;
  };

  ChannelCommand = (function(_super) {
    __extends(ChannelCommand, _super);

    function ChannelCommand() {
      _ref = ChannelCommand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ChannelCommand.prototype.on_data = function(data) {
      var channel, channels, delta, formatted, i, line, max_name_length, name, name_per_line, names, space, str, table, _i, _j, _len, _len1;
      window.T.resume();
      channels = data;
      max_name_length = 0;
      this.echo(Array(80).join('-'));
      names = [];
      for (_i = 0, _len = channels.length; _i < _len; _i++) {
        channel = channels[_i];
        name = "" + channel.seq_id + "." + channel.name;
        names.push(name);
        max_name_length = Math.max(name.width(), max_name_length);
      }
      name_per_line = Math.floor(80 / max_name_length);
      table = "<table>";
      line = "";
      space = 2;
      for (i = _j = 0, _len1 = names.length; _j < _len1; i = ++_j) {
        name = names[i];
        if (i !== 0 && i % name_per_line === 0) {
          line += "</tr>";
          table += line;
          line = "<tr>";
        }
        str = "[[ub;#2ecc71;#000]" + name + "]";
        formatted = $.terminal.format(str);
        delta = max_name_length - name.width();
        line += "<td>" + formatted + "</td>";
      }
      table += "</table>";
      this.echo(table, {
        raw: true
      });
      this.echo(Array(80).join('-'));
    };

    ChannelCommand.prototype.execute = function() {
      var _this = this;
      if (window.DoubanFM.channels == null) {
        this.echo("Requesting...");
        window.T.pause();
        window.DoubanFM.update(function(channels) {
          return _this.on_data(channels);
        }, function(status, error) {
          return _this.on_error(status, error);
        });
      } else {
        this.on_data(window.DoubanFM.channels);
      }
    };

    return ChannelCommand;

  })(window.CommandBase);

  (new ChannelCommand("channel", "Show channel list")).register();

}).call(this);

/*
//@ sourceMappingURL=command.channel.map
*/
