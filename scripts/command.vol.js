// Generated by CoffeeScript 1.6.3
(function() {
  var MuteCommand, VolCommand, VolDownCommand, VolUpCommand, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MuteCommand = (function(_super) {
    __extends(MuteCommand, _super);

    function MuteCommand() {
      _ref = MuteCommand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MuteCommand.prototype.execute = function() {
      return window.DoubanFM.mute();
    };

    return MuteCommand;

  })(window.CommandBase);

  VolCommand = (function(_super) {
    __extends(VolCommand, _super);

    function VolCommand() {
      _ref1 = VolCommand.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    VolCommand.prototype.execute = function(vol) {
      return window.DoubanFM.setVol(vol);
    };

    return VolCommand;

  })(window.CommandBase);

  VolUpCommand = (function(_super) {
    __extends(VolUpCommand, _super);

    function VolUpCommand() {
      _ref2 = VolUpCommand.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    VolUpCommand.prototype.execute = function() {
      var vol, _ref3, _ref4, _ref5;
      vol = typeof window !== "undefined" && window !== null ? (_ref3 = window.DoubanFM) != null ? (_ref4 = _ref3.player) != null ? _ref4.vol : void 0 : void 0 : void 0;
      if (vol == null) {
        return;
      }
      if (vol >= 100) {
        if ((_ref5 = window.T) != null) {
          _ref5.echo("Max volume");
        }
        return;
      }
      vol = Math.min(100, vol + 10);
      return window.DoubanFM.setVol(vol);
    };

    return VolUpCommand;

  })(window.CommandBase);

  VolDownCommand = (function(_super) {
    __extends(VolDownCommand, _super);

    function VolDownCommand() {
      _ref3 = VolDownCommand.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    VolDownCommand.prototype.execute = function() {
      var vol, _ref4, _ref5, _ref6;
      vol = typeof window !== "undefined" && window !== null ? (_ref4 = window.DoubanFM) != null ? (_ref5 = _ref4.player) != null ? _ref5.vol : void 0 : void 0 : void 0;
      if (vol == null) {
        return;
      }
      if (vol <= 0) {
        if ((_ref6 = window.T) != null) {
          _ref6.echo("Min volume");
        }
        return;
      }
      vol = Math.max(0, vol - 10);
      return window.DoubanFM.setVol(vol);
    };

    return VolDownCommand;

  })(window.CommandBase);

  (new MuteCommand("mute", "Mute/unmute")).register();

  (new VolCommand("vol", "Format: vol <range>. Set volume. Range 0~100. Display current volume if range is not provided.")).register();

  (new VolUpCommand("up", "Increase volume by 10")).register();

  (new VolDownCommand("down", "Decrease volume by 10")).register();

}).call(this);

/*
//@ sourceMappingURL=command.vol.map
*/
